name: Upload Data to Glue

on:
  push:
    branches:
      - master

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: rpscrape/upload_data
  ECS_CLUSTER: horse-racing-trader
  ECS_TASK_DEFINITION: .aws/upload-data.json
  LOG_GROUP_NAME: /ecs/rpscrape-upload-data

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create CloudWatch Log Group
      run: |
        # Check if log group exists
        if ! aws logs describe-log-groups --log-group-name-prefix ${{ env.LOG_GROUP_NAME }} | grep -q ${{ env.LOG_GROUP_NAME }}; then
          echo "Creating log group ${{ env.LOG_GROUP_NAME }}"
          aws logs create-log-group --log-group-name ${{ env.LOG_GROUP_NAME }}
          # Set retention policy to 30 days to manage costs
          aws logs put-retention-policy --log-group-name ${{ env.LOG_GROUP_NAME }} --retention-in-days 30
        else
          echo "Log group ${{ env.LOG_GROUP_NAME }} already exists"
        fi

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -f Dockerfile.upload_data -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: rpscrape-upload-data
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: false
